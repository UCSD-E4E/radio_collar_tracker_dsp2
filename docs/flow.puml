@startuml RCT Run Activity Diagram

start

fork
    while(always)
        fork
            : uhd_usrp_probe;
        fork again
            : wait for gps;
        fork again
            : check filesystem;
        end fork

        : wait for start command;
        : start Ping Finder;
        : wait for stop command;
        : stop Ping Finder;
    endwhile
fork again
    while(always)
        : process incoming TCP messages;
    endwhile
fork again
    while(always)
        : send heartbeat;
    endwhile
end fork
stop
@enduml

@startuml RCT Signal Processing Diagram
!pragma teoz true
participant SDR
participant "Host Library"
box "AbstractSDR"
participant "AbstractSDR"
end box
queue "Input Queue" as i_q
box "DSPv3"
box "_unpack"
participant Unpack
participant "File Sink"
participant FFT
participant Integrator
end box
queue "Power Queue" as c_q
box "classify"
participant Detector
end box
end box
SDR -> "Host Library" : USB Transfer
"Host Library" -> AbstractSDR : Raw Transfer
AbstractSDR -> i_q : Complex IQ x Transfer Block
i_q -> Unpack : Complex IQ x Transfer Block
Unpack -> FFT : Complex IQ x FFT Length
Unpack -> "File Sink" : Complex IQ X Transfer Block
FFT -> Integrator : Complex Spectra x FFT Length
Integrator -> c_q : Spectral Power x FFT Length
c_q -> Detector : Spectral Power x FFT Length
queue "Ping Queue" as p_q
Detector -> p_q : Detected Pings
p_q -> "Ping Sink" : Detected Pings
"Ping Sink" -> "Application Callback" : Ping Parameters
@enduml

@startuml RCT Run Class Diagram
class RCTRun
{
    init()

    doSensorPacket()
    doHeartbeatPacket()

    doPingPacket()

    doSetConfiguationPacket()
    doGetConfigurationPacket()
    doStartDeploymentPacket()
    doStopDeploymentPacket()

    uib: UIBSingleton
    comms: RCTDroneComms
}

class UIBSingleton
{
    init()
    registerSensorHandler()
    registerHeartbeatHandler()

    sendStatus()
}

class RCTDroneComms
{
    init()

    registerSetConfigPacket()
    registerGetConfigPacket()
    registerStartDeploymentPacket()
    registerStopDeploymentPacket()

    sendHeartbeat()
    sendPing()
    sendConfiguration()
}

class RCTGCSComms
{
    init()

    sendSetConfig()
    sendGetConfig()
    sendStartDeployment()
    sendStopDeployment()

    registerHeartbeatHandler()
    registerPingHandler()
    registerConfigurationHandler()
}

@enduml